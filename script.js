// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫
const WORK_SCHEDULE = {
    // –ù–∞—á–∞–ª–Ω–∞ –¥–∞—Ç–∞: 27.10.2025 (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫) - –ø—ä—Ä–≤–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞ —Å –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –∏ –≤—Ç–æ—Ä–Ω–∏–∫
    startDate: new Date(2025, 9, 27), // –ú–µ—Å–µ—Ü—ä—Ç –µ 0-–±–∞–∑–∏—Ä–∞–Ω, —Ç–∞–∫–∞ —á–µ 9 = –æ–∫—Ç–æ–º–≤—Ä–∏
    
    // –ì—Ä–∞—Ñ–∏–∫: 3-—Å–µ–¥–º–∏—á–µ–Ω —Ü–∏–∫—ä–ª
    pattern: [
        { days: [1, 2], weeks: 1 }, // –°–µ–¥–º–∏—Ü–∞ 1: –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ (1) –∏ –≤—Ç–æ—Ä–Ω–∏–∫ (2)
        { days: [3, 4], weeks: 1 }, // –°–µ–¥–º–∏—Ü–∞ 2: –°—Ä—è–¥–∞ (3) –∏ —á–µ—Ç–≤—ä—Ä—Ç—ä–∫ (4)
        { days: [5], weeks: 1 }     // –°–µ–¥–º–∏—Ü–∞ 3: –ü–µ—Ç—ä–∫ (5)
    ]
};

// –ò–º–µ–Ω–∞ –Ω–∞ –¥–Ω–∏—Ç–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏
const DAY_NAMES = {
    0: '–ù–µ–¥–µ–ª—è',
    1: '–ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫',
    2: '–í—Ç–æ—Ä–Ω–∏–∫', 
    3: '–°—Ä—è–¥–∞',
    4: '–ß–µ—Ç–≤—ä—Ä—Ç—ä–∫',
    5: '–ü–µ—Ç—ä–∫',
    6: '–°—ä–±–æ—Ç–∞'
};

// –ò–º–µ–Ω–∞ –Ω–∞ –º–µ—Å–µ—Ü–∏—Ç–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏
const MONTH_NAMES = [
    '—è–Ω—É–∞—Ä–∏', '—Ñ–µ–≤—Ä—É–∞—Ä–∏', '–º–∞—Ä—Ç', '–∞–ø—Ä–∏–ª', '–º–∞–π', '—é–Ω–∏',
    '—é–ª–∏', '–∞–≤–≥—É—Å—Ç', '—Å–µ–ø—Ç–µ–º–≤—Ä–∏', '–æ–∫—Ç–æ–º–≤—Ä–∏', '–Ω–æ–µ–º–≤—Ä–∏', '–¥–µ–∫–µ–º–≤—Ä–∏'
];

// –¢–µ–∫—É—â –∏–∑–±—Ä–∞–Ω –º–µ—Å–µ—Ü
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();

// –¢–µ–∫—É—â –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä
let activeCalendar = 'office'; // 'office' –∏–ª–∏ 'qc'

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ –µ –º–æ–±–∏–ª–Ω–æ
function isMobile() {
    return window.innerWidth <= 768;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞
function formatDate(date) {
    const day = date.getDate();
    const month = MONTH_NAMES[date.getMonth()];
    const year = date.getFullYear();
    const dayName = DAY_NAMES[date.getDay()];
    
    return `${day} ${month} ${year} (${dayName})`;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ø–µ—Ç—ä–∫)
function isWorkDay(date) {
    const day = date.getDay();
    return day >= 1 && day <= 5; // –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –¥–æ –ø–µ—Ç—ä–∫
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫–∞ –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –Ω–∞ –¥–∞–¥–µ–Ω–∞ –¥–∞—Ç–∞
function getMondayOfWeek(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // –ö–æ—Ä–∏–≥–∏—Ä–∞–º–µ –∑–∞ –Ω–µ–¥–µ–ª—è
    return new Date(d.setDate(diff));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ –æ—Ñ–∏—Å –¥–µ–Ω
function isOfficeDay(date) {
    if (!isWorkDay(date)) return false;
    
    // –ù–∞–º–∏—Ä–∞–º–µ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫–∞ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –∑–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –∏ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞
    const startMonday = getMondayOfWeek(WORK_SCHEDULE.startDate);
    const currentMonday = getMondayOfWeek(date);
    
    // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫–æ–ª–∫–æ —Å–µ–¥–º–∏—Ü–∏ —Å–∞ –º–∏–Ω–∞–ª–∏ –æ—Ç –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
    const weeksDiff = Math.round((currentMonday - startMonday) / (7 * 24 * 60 * 60 * 1000));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–º–µ –≤ –∫–æ–π —Ü–∏–∫—ä–ª —Å–º–µ (—Ä–∞–±–æ—Ç–∏ –∏ –∑–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏)
    const totalWeeksInCycle = WORK_SCHEDULE.pattern.reduce((sum, pattern) => sum + pattern.weeks, 0);
    const cyclePosition = ((weeksDiff % totalWeeksInCycle) + totalWeeksInCycle) % totalWeeksInCycle;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–æ–π –¥–µ–Ω –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –µ
    const dayOfWeek = date.getDay();
    
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–µ–Ω—è—Ç –µ –≤ —Ç–µ–∫—É—â–∏—è —Ü–∏–∫—ä–ª
    let weekCount = 0;
    for (const pattern of WORK_SCHEDULE.pattern) {
        if (cyclePosition >= weekCount && cyclePosition < weekCount + pattern.weeks) {
            return pattern.days.includes(dayOfWeek);
        }
        weekCount += pattern.weeks;
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –¥–µ–Ω
function getDayStatus(date) {
    if (!isWorkDay(date)) {
        return 'weekend';
    }
    return isOfficeDay(date) ? 'office' : 'remote';
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusDescription(status) {
    switch(status) {
        case 'office': return '–í –æ—Ñ–∏—Å–∞';
        case 'remote': return '–û—Ç –≤–∫—ä—â–∏';
        case 'weekend': return '–ü–æ—á–∏–≤–∫–∞';
        case 'weekly-qc': return 'Weekly QC';
        case 'monthly-qc': return 'Monthly QC';
        case 'no-qc': return '–ë–µ–∑ QC';
        default: return '';
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä—Ä–≤–∞—Ç–∞ –ø—ä–ª–Ω–∞ —Å–µ–¥–º–∏—Ü–∞ –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ü–µ—Ç—ä–∫
function getFirstFullWeekRange(year, month) {
    // –ù–∞–º–∏—Ä–∞–º–µ –ø—ä—Ä–≤–∏—è –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –æ—Ç –º–µ—Å–µ—Ü–∞
    const firstDayOfMonth = new Date(year, month, 1);
    let firstMonday = new Date(firstDayOfMonth);
    
    // –ê–∫–æ –ø—ä—Ä–≤–∏—è—Ç –¥–µ–Ω –Ω–µ –µ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫, –Ω–∞–º–∏—Ä–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫
    const firstDayWeekday = firstDayOfMonth.getDay();
    if (firstDayWeekday === 0) {
        // –ê–∫–æ –µ –Ω–µ–¥–µ–ª—è, –ø—ä—Ä–≤–∏—è—Ç –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –µ —Å–ª–µ–¥ 1 –¥–µ–Ω
        firstMonday.setDate(firstDayOfMonth.getDate() + 1);
    } else if (firstDayWeekday > 1) {
        // –ê–∫–æ –µ –≤—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ –ø–æ-–∫—ä—Å–Ω–æ, –ø—Ä–µ–º–∏–Ω–∞–≤–∞–º–µ –∫—ä–º —Å–ª–µ–¥–≤–∞—â–∏—è –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫
        firstMonday.setDate(firstDayOfMonth.getDate() + (8 - firstDayWeekday));
    }
    // –ê–∫–æ –µ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ (1), firstMonday –≤–µ—á–µ –µ –ø—Ä–∞–≤–∏–ª–µ–Ω
    
    // –ü—ä—Ä–≤–∏—è—Ç –ø–µ—Ç—ä–∫ –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –µ —Å–ª–µ–¥ 4 –¥–Ω–∏
    const firstFriday = new Date(firstMonday);
    firstFriday.setDate(firstMonday.getDate() + 4);
    
    return {
        mondayDate: firstMonday.getDate(),
        fridayDate: firstFriday.getDate()
    };
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ QC —Å—Ç–∞—Ç—É—Å –∑–∞ –¥–∞–¥–µ–Ω–∞ –¥–∞—Ç–∞
function getQCStatus(date) {
    const dayOfWeek = date.getDay();
    const dayOfMonth = date.getDate();
    const year = date.getFullYear();
    const month = date.getMonth();
    
    // –£–∏–∫–µ–Ω–¥–∏ - –±–µ–∑ QC
    if (dayOfWeek === 0 || dayOfWeek === 6) {
        return 'no-qc';
    }
    
    // –ù–∞–º–∏—Ä–∞–º–µ –ø—ä—Ä–≤–∞—Ç–∞ –ø—ä–ª–Ω–∞ —Å–µ–¥–º–∏—Ü–∞ –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ü–µ—Ç—ä–∫
    const firstWeek = getFirstFullWeekRange(year, month);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–º–µ –≤ –ø—ä—Ä–≤–∞—Ç–∞ –ø—ä–ª–Ω–∞ —Å–µ–¥–º–∏—Ü–∞ (–ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ü–µ—Ç—ä–∫)
    if (dayOfMonth >= firstWeek.mondayDate && dayOfMonth <= firstWeek.fridayDate) {
        // Monthly QC –∑–∞ —Ü—è–ª–∞—Ç–∞ –ø—ä—Ä–≤–∞ —Å–µ–¥–º–∏—Ü–∞
        return 'monthly-qc';
    }
    
    // –í—Å–∏—á–∫–∏ –¥—Ä—É–≥–∏ —Å–µ–¥–º–∏—Ü–∏: —Å–∞–º–æ Weekly QC –≤ –°—Ä—è–¥–∞ –∏ –ß–µ—Ç–≤—ä—Ä—Ç—ä–∫
    if (dayOfWeek === 3 || dayOfWeek === 4) {
        return 'weekly-qc';
    }
    
    // –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –¥–Ω–∏ - –±–µ–∑ QC
    return 'no-qc';
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω –≤ –º–µ—Å–µ—Ü–∞
function isLastWorkingDayOfMonth(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    
    // –ù–∞–º–∏—Ä–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—è –¥–µ–Ω –æ—Ç –º–µ—Å–µ—Ü–∞
    const lastDayOfMonth = new Date(year, month + 1, 0);
    
    // –¢—ä—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏—è —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ø–µ—Ç—ä–∫)
    let lastWorkingDay = new Date(lastDayOfMonth);
    
    while (lastWorkingDay.getDay() === 0 || lastWorkingDay.getDay() === 6) {
        lastWorkingDay.setDate(lastWorkingDay.getDate() - 1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ –ø–æ—Å–ª–µ–¥–Ω–∏—è—Ç —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω
    return date.getDate() === lastWorkingDay.getDate() && 
           date.getMonth() === lastWorkingDay.getMonth() &&
           date.getFullYear() === lastWorkingDay.getFullYear();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –æ—Ñ–∏—Å –¥–µ–Ω
function getNextOfficeDay(fromDate) {
    const searchDate = new Date(fromDate);
    searchDate.setDate(searchDate.getDate() + 1); // –ó–∞–ø–æ—á–≤–∞–º–µ –æ—Ç —É—Ç—Ä–µ
    
    // –¢—ä—Ä—Å–∏–º –º–∞–∫—Å–∏–º—É–º 30 –¥–Ω–∏ –Ω–∞–ø—Ä–µ–¥
    for (let i = 0; i < 30; i++) {
        if (isOfficeDay(searchDate)) {
            return new Date(searchDate);
        }
        searchDate.setDate(searchDate.getDate() + 1);
    }
    
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å
function showCurrentStatus() {
    const today = new Date();
    const currentDateElement = document.getElementById('currentDate');
    const todayStatusElement = document.getElementById('todayStatus');
    
    currentDateElement.textContent = formatDate(today);
    
    let statusText = '';
    let statusClass = '';
    
    if (activeCalendar === 'office') {
        const status = getDayStatus(today);
        const nextOfficeDay = getNextOfficeDay(today);
        
        if (status === 'office') {
            statusText = 'üè¢ –î–Ω–µ—Å —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–º –≤ –æ—Ñ–∏—Å–∞';
            statusClass = 'status office';
        } else {
            if (nextOfficeDay) {
                const nextDay = DAY_NAMES[nextOfficeDay.getDay()];
                const nextDate = `${nextOfficeDay.getDate()}.${(nextOfficeDay.getMonth() + 1).toString().padStart(2, '0')}`;
                todayStatusElement.innerHTML = `üè¢ –°–ª–µ–¥–≤–∞—â –æ—Ñ–∏—Å –¥–µ–Ω: <strong>${nextDay}, ${nextDate}</strong>`;
                todayStatusElement.className = 'status remote';
                return;
            } else {
                statusText = 'üè† –†–∞–±–æ—Ç—è –æ—Ç –≤–∫—ä—â–∏';
                statusClass = 'status remote';
            }
        }
    } else if (activeCalendar === 'qc') {
        const qcStatus = getQCStatus(today);
        
        if (qcStatus === 'monthly-qc') {
            statusText = 'üìã –î–Ω–µ—Å –∏–º–∞–º–µ Monthly QC';
            statusClass = 'status monthly-qc';
        } else if (qcStatus === 'weekly-qc') {
            statusText = 'üìã –î–Ω–µ—Å –∏–º–∞–º–µ Weekly QC';
            statusClass = 'status weekly-qc';
        } else {
            statusText = '‚úÖ –î–Ω–µ—Å –Ω—è–º–∞ QC';
            statusClass = 'status remote';
        }
    }
    
    todayStatusElement.textContent = statusText;
    todayStatusElement.className = statusClass;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä –∑–∞ –º–µ—Å–µ—Ü
function generateCalendar(month, year) {
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    
    // –ù–∞–º–∏—Ä–∞–º–µ –ø—ä—Ä–≤–∏—è –¥–µ–Ω –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫)
    const dayOfWeek = firstDay.getDay();
    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
    startDate.setDate(firstDay.getDate() - daysToMonday);
    
    const calendar = [];
    const today = new Date();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ 6 —Å–µ–¥–º–∏—Ü–∏ (42 –¥–Ω–∏) –∑–∞ –¥–∞ –ø–æ–∫—Ä–∏–µ–º —Ü–µ–ª–∏—è –º–µ—Å–µ—Ü
    for (let week = 0; week < 6; week++) {
        const weekDays = [];
        for (let day = 0; day < 7; day++) {
            const currentDate = new Date(startDate);
            currentDate.setDate(startDate.getDate() + (week * 7) + day);
            
            const isCurrentMonth = currentDate.getMonth() === month;
            const isToday = currentDate.toDateString() === today.toDateString();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–º–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä
            const status = activeCalendar === 'office' ? getDayStatus(currentDate) : getQCStatus(currentDate);
            
            weekDays.push({
                date: new Date(currentDate),
                dayNumber: currentDate.getDate(),
                isCurrentMonth: isCurrentMonth,
                isToday: isToday,
                status: status
            });
        }
        calendar.push(weekDays);
    }
    
    return calendar;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
function showCalendar() {
    const calendarDays = document.getElementById('calendarDays');
    const currentMonthYear = document.getElementById('currentMonthYear');
    
    // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü –∏ –≥–æ–¥–∏–Ω–∞
    currentMonthYear.textContent = `${MONTH_NAMES[currentMonth]} ${currentYear}`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    const calendar = generateCalendar(currentMonth, currentYear);
    
    calendarDays.innerHTML = '';
    
    calendar.forEach((week, weekIndex) => {
        week.forEach((day, dayIndex) => {
            const dayElement = document.createElement('div');
            dayElement.className = `calendar-day ${day.status}`;
            dayElement.setAttribute('role', 'gridcell');
            dayElement.setAttribute('aria-label', `${day.dayNumber} ${MONTH_NAMES[day.date.getMonth()]} ${day.date.getFullYear()}, ${getStatusDescription(day.status)}`);
            
            if (!day.isCurrentMonth) {
                dayElement.classList.add('other-month');
            }
            
            if (day.isToday) {
                dayElement.classList.add('today');
                dayElement.setAttribute('aria-current', 'date');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–µ–Ω —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω –æ—Ç –º–µ—Å–µ—Ü–∞ (—Å–∞–º–æ –∑–∞ –æ—Ñ–∏—Å –∫–∞–ª–µ–Ω–¥–∞—Ä)
            const isPayday = activeCalendar === 'office' && day.isCurrentMonth && isLastWorkingDayOfMonth(day.date);
            if (isPayday) {
                dayElement.classList.add('payday');
            }
            
            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = day.dayNumber;
            
            const dayStatus = document.createElement('div');
            dayStatus.className = 'day-status';
            
            // –ê–∫–æ –µ –¥–µ–Ω –Ω–∞ –∑–∞–ø–ª–∞—Ç–∞, –ø–æ–∫–∞–∑–≤–∞–º–µ —Å–∞–º–æ –∑–∞–ø–ª–∞—Ç–∞
            if (isPayday) {
                // –ù–∞ –º–æ–±–∏–ª–Ω–∏ - –±–µ–∑ –µ–º–æ–¥–∂–∏, –Ω–∞ desktop - —Å –µ–º–æ–¥–∂–∏
                if (isMobile()) {
                    dayStatus.textContent = '–ó–∞–ø–ª–∞—Ç–∞';
                } else {
                    dayStatus.textContent = 'üí∞ –ó–∞–ø–ª–∞—Ç–∞ üí∞';
                }
            } else {
                dayStatus.textContent = getStatusDescription(day.status);
            }
            
            dayElement.appendChild(dayNumber);
            dayElement.appendChild(dayStatus);
            
            // –î–æ–±–∞–≤—è–º–µ touch events –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if (isMobile()) {
                dayElement.addEventListener('touchstart', () => {
                    dayElement.style.transform = 'scale(0.95)';
                });
                
                dayElement.addEventListener('touchend', () => {
                    dayElement.style.transform = '';
                });
            }
            
            calendarDays.appendChild(dayElement);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫—ä–º –ø—Ä–µ–¥–∏—à–µ–Ω –º–µ—Å–µ—Ü
function goToPreviousMonth() {
    currentMonth--;
    if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
    }
    showCalendar();
    
    // –î–æ–±–∞–≤—è–º–µ haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (navigator.vibrate) {
        navigator.vibrate(50);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫—ä–º —Å–ª–µ–¥–≤–∞—â –º–µ—Å–µ—Ü
function goToNextMonth() {
    currentMonth++;
    if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
    }
    showCalendar();
    
    // –î–æ–±–∞–≤—è–º–µ haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (navigator.vibrate) {
        navigator.vibrate(50);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫—ä–º —Ç–µ–∫—É—â–∏—è –¥–µ–Ω
function goToToday() {
    const today = new Date();
    currentMonth = today.getMonth();
    currentYear = today.getFullYear();
    showCalendar();
    
    // –î–æ–±–∞–≤—è–º–µ haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (navigator.vibrate) {
        navigator.vibrate(50);
    }
    
    // –î–æ–±–∞–≤—è–º–µ –≤–∏–∑—É–∞–ª–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞
    const todayBtn = document.getElementById('goToToday');
    todayBtn.style.transform = 'scale(0.95)';
    setTimeout(() => {
        todayBtn.style.transform = '';
    }, 150);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∏ —Å—ä–∫—Ä–∞—â–µ–Ω–∏—è
function handleKeyboardNavigation(event) {
    switch(event.key) {
        case 'ArrowLeft':
            event.preventDefault();
            goToPreviousMonth();
            break;
        case 'ArrowRight':
            event.preventDefault();
            goToNextMonth();
            break;
        case 'Home':
            event.preventDefault();
            goToToday();
            break;
        case 't':
        case 'T':
            event.preventDefault();
            goToToday();
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ swipe gestures –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
let touchStartX = 0;
let touchEndX = 0;
let touchStartY = 0;
let touchEndY = 0;

function handleTouchStart(event) {
    touchStartX = event.changedTouches[0].screenX;
    touchStartY = event.changedTouches[0].screenY;
}

function handleTouchEnd(event) {
    touchEndX = event.changedTouches[0].screenX;
    touchEndY = event.changedTouches[0].screenY;
    handleSwipe();
}

function handleSwipe() {
    const swipeThreshold = 50;
    const diffX = touchStartX - touchEndX;
    const diffY = touchStartY - touchEndY;
    
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ swipe-—ä—Ç –µ –ø—Ä–µ–¥–∏–º–Ω–æ —Ö–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–µ–Ω
    if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > swipeThreshold) {
        if (diffX > 0) {
            // Swipe left - next month
            goToNextMonth();
        } else {
            // Swipe right - previous month
            goToPreviousMonth();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–±–∏–ª–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
function enhanceMobileNavigation() {
    if (isMobile()) {
        // –î–æ–±–∞–≤—è–º–µ –ø–æ-–≥–æ–ª–µ–º–∏ touch areas –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => {
            btn.addEventListener('touchstart', function() {
                this.style.transform = 'scale(0.9)';
            });
            
            btn.addEventListener('touchend', function() {
                this.style.transform = '';
            });
        });
        
        // –î–æ–±–∞–≤—è–º–µ long press –∑–∞ –±—ä—Ä–∑–æ –ø—Ä–µ–º–∏–Ω–∞–≤–∞–Ω–µ –∫—ä–º –¥–Ω–µ—Å
        let longPressTimer;
        const todayBtn = document.getElementById('goToToday');
        
        todayBtn.addEventListener('touchstart', function() {
            longPressTimer = setTimeout(() => {
                goToToday();
                if (navigator.vibrate) {
                    navigator.vibrate([100, 50, 100]);
                }
            }, 800);
        });
        
        todayBtn.addEventListener('touchend', function() {
            clearTimeout(longPressTimer);
        });
        
        todayBtn.addEventListener('touchmove', function() {
            clearTimeout(longPressTimer);
        });
    }
}

let lastRenderedDate = new Date();

function updateDateTime() {
    const now = new Date();
    showCurrentStatus();

    // –û–±–Ω–æ–≤—è–≤–∞–π –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–∞–º–æ –∞–∫–æ –µ –Ω–æ–≤ –¥–µ–Ω
    if (
        now.getDate() !== lastRenderedDate.getDate() ||
        now.getMonth() !== lastRenderedDate.getMonth() ||
        now.getFullYear() !== lastRenderedDate.getFullYear()
    ) {
        currentMonth = now.getMonth();
        currentYear = now.getFullYear();
        showCalendar();
        lastRenderedDate = now;
    }
}

function scheduleDayUpdate() {
    const now = new Date();
    // –ò–∑—á–∏—Å–ª–∏ –∫–æ–ª–∫–æ ms –¥–æ —Å–ª–µ–¥–≤–∞—â–∏—è –¥–µ–Ω (00:00:00)
    const nextDay = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0, 0);
    const msToNextDay = nextDay - now;

    setTimeout(() => {
        updateDateTime(); // —â–µ –æ–±–Ω–æ–≤–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
        scheduleDayUpdate(); // –Ω–∞—Å—Ä–æ—á–∏ —Å–ª–µ–¥–≤–∞—â–æ—Ç–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ
    }, msToNextDay);
}

function startAutoUpdate() {
    updateDateTime();
    setInterval(showCurrentStatus, 60000);
    scheduleDayUpdate();

    document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
            updateDateTime();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–µ–≤–∫–ª—é—á–≤–∞–Ω–µ –º–µ–∂–¥—É –∫–∞–ª–µ–Ω–¥–∞—Ä–∏
function switchCalendar(calendarType) {
    activeCalendar = calendarType;
    
    // –û–±–Ω–æ–≤—è–≤–∞–º–µ –∞–∫—Ç–∏–≤–Ω–∏—è –±—É—Ç–æ–Ω
    document.querySelectorAll('.switch-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    if (calendarType === 'office') {
        document.getElementById('officeCalendarBtn').classList.add('active');
        document.getElementById('officeLegend').style.display = 'flex';
        document.getElementById('qcLegend').style.display = 'none';
    } else if (calendarType === 'qc') {
        document.getElementById('qcCalendarBtn').classList.add('active');
        document.getElementById('officeLegend').style.display = 'none';
        document.getElementById('qcLegend').style.display = 'flex';
    }
    
    // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    showCurrentStatus();
    showCalendar();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
function initApp() {
    showCurrentStatus();
    showCalendar();
    
    // –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Ç–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ
    startAutoUpdate();
    
    // –î–æ–±–∞–≤—è–º–µ event listeners –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è—Ç–∞
    document.getElementById('prevMonth').addEventListener('click', goToPreviousMonth);
    document.getElementById('nextMonth').addEventListener('click', goToNextMonth);
    document.getElementById('goToToday').addEventListener('click', goToToday);
    
    // –î–æ–±–∞–≤—è–º–µ event listeners –∑–∞ –ø—Ä–µ–≤–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏
    document.getElementById('officeCalendarBtn').addEventListener('click', () => switchCalendar('office'));
    document.getElementById('qcCalendarBtn').addEventListener('click', () => switchCalendar('qc'));
    
    // –î–æ–±–∞–≤—è–º–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    document.addEventListener('keydown', handleKeyboardNavigation);
    
    // Swipe –∂–µ—Å—Ç–æ–≤–µ —Å–∞ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∏ –∑–∞ –¥–∞ –Ω–µ –ø—Ä–µ—á–∞—Ç –Ω–∞ zoom –∏ scroll
    
    // –î–æ–±–∞–≤—è–º–µ focus management –∑–∞ –ø–æ-–¥–æ–±—Ä–∞ –¥–æ—Å—Ç—ä–ø–Ω–æ—Å—Ç
    document.getElementById('prevMonth').addEventListener('focus', function() {
        this.setAttribute('aria-expanded', 'true');
    });
    
    document.getElementById('nextMonth').addEventListener('focus', function() {
        this.setAttribute('aria-expanded', 'true');
    });
    
    document.getElementById('goToToday').addEventListener('focus', function() {
        this.setAttribute('aria-expanded', 'true');
    });
    
    // –î–æ–±–∞–≤—è–º–µ –ø–æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–±–∏–ª–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    enhanceMobileNavigation();
}

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∫–æ–≥–∞—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å–µ –∑–∞—Ä–µ–¥–∏
document.addEventListener('DOMContentLoaded', initApp); 