// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫
// 3-—Å–µ–¥–º–∏—á–µ–Ω —Ä–æ—Ç–∞—Ü–∏–æ–Ω–µ–Ω —Ü–∏–∫—ä–ª
// –ù–∞—á–∞–ª–Ω–∞ –¥–∞—Ç–∞: 27 –æ–∫—Ç–æ–º–≤—Ä–∏ 2025 (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫) - –Ω–∞—á–∞–ª–æ –Ω–∞ –°–µ–¥–º–∏—Ü–∞ 1
const WORK_SCHEDULE = {
    startDate: new Date(2025, 9, 27), // 27 –æ–∫—Ç–æ–º–≤—Ä–∏ 2025 (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫)
    
    pattern: [
        { days: [1, 2], weeks: 1 },  // –°–µ–¥–º–∏—Ü–∞ 1: –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫ (28-29 –æ–∫—Ç–æ–º–≤—Ä–∏, 17-18 –Ω–æ–µ–º–≤—Ä–∏, –∏ —Ç.–Ω.)
        { days: [3, 4], weeks: 1 },  // –°–µ–¥–º–∏—Ü–∞ 2: –°—Ä—è–¥–∞, –ß–µ—Ç–≤—ä—Ä—Ç—ä–∫ (5-6 –Ω–æ–µ–º–≤—Ä–∏, 26-27 –Ω–æ–µ–º–≤—Ä–∏, –∏ —Ç.–Ω.)
        { days: [5], weeks: 1 }      // –°–µ–¥–º–∏—Ü–∞ 3: –ü–µ—Ç—ä–∫ (14 –Ω–æ–µ–º–≤—Ä–∏, 5 –¥–µ–∫–µ–º–≤—Ä–∏, –∏ —Ç.–Ω.)
    ]
};

// –ò–º–µ–Ω–∞ –Ω–∞ –¥–Ω–∏—Ç–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏
const DAY_NAMES = {
    0: '–ù–µ–¥–µ–ª—è',
    1: '–ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫',
    2: '–í—Ç–æ—Ä–Ω–∏–∫', 
    3: '–°—Ä—è–¥–∞',
    4: '–ß–µ—Ç–≤—ä—Ä—Ç—ä–∫',
    5: '–ü–µ—Ç—ä–∫',
    6: '–°—ä–±–æ—Ç–∞'
};

// –ò–º–µ–Ω–∞ –Ω–∞ –º–µ—Å–µ—Ü–∏—Ç–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏
const MONTH_NAMES = [
    '—è–Ω—É–∞—Ä–∏', '—Ñ–µ–≤—Ä—É–∞—Ä–∏', '–º–∞—Ä—Ç', '–∞–ø—Ä–∏–ª', '–º–∞–π', '—é–Ω–∏',
    '—é–ª–∏', '–∞–≤–≥—É—Å—Ç', '—Å–µ–ø—Ç–µ–º–≤—Ä–∏', '–æ–∫—Ç–æ–º–≤—Ä–∏', '–Ω–æ–µ–º–≤—Ä–∏', '–¥–µ–∫–µ–º–≤—Ä–∏'
];

// –¢–µ–∫—É—â –∏–∑–±—Ä–∞–Ω –º–µ—Å–µ—Ü
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();

// –î–∞–Ω–Ω–∏ –∑–∞ –æ—Ñ–∏—Å –º–µ—Å—Ç–∞—Ç–∞
let officeSeatsData = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ –µ –º–æ–±–∏–ª–Ω–æ
function isMobile() {
    return window.innerWidth <= 768;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞
function formatDate(date) {
    const day = date.getDate();
    const month = MONTH_NAMES[date.getMonth()];
    const year = date.getFullYear();
    const dayName = DAY_NAMES[date.getDay()];
    
    return `${day} ${month} ${year} (${dayName})`;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ø–µ—Ç—ä–∫)
function isWorkDay(date) {
    const day = date.getDay();
    return day >= 1 && day <= 5; // –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –¥–æ –ø–µ—Ç—ä–∫
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫–∞ –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –Ω–∞ –¥–∞–¥–µ–Ω–∞ –¥–∞—Ç–∞
function getMondayOfWeek(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // –ö–æ—Ä–∏–≥–∏—Ä–∞–º–µ –∑–∞ –Ω–µ–¥–µ–ª—è
    return new Date(d.setDate(diff));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ –æ—Ñ–∏—Å –¥–µ–Ω
function isOfficeDay(date) {
    if (!isWorkDay(date)) return false;
    
    // –ù–∞–º–∏—Ä–∞–º–µ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫–∞ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –∑–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –∏ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞
    const startMonday = getMondayOfWeek(WORK_SCHEDULE.startDate);
    const currentMonday = getMondayOfWeek(date);
    
    // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫–æ–ª–∫–æ —Å–µ–¥–º–∏—Ü–∏ —Å–∞ –º–∏–Ω–∞–ª–∏ –æ—Ç –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
    const weeksDiff = Math.round((currentMonday - startMonday) / (7 * 24 * 60 * 60 * 1000));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–º–µ –≤ –∫–æ–π —Ü–∏–∫—ä–ª —Å–º–µ (—Ä–∞–±–æ—Ç–∏ –∏ –∑–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏)
    const totalWeeksInCycle = WORK_SCHEDULE.pattern.reduce((sum, pattern) => sum + pattern.weeks, 0);
    const cyclePosition = ((weeksDiff % totalWeeksInCycle) + totalWeeksInCycle) % totalWeeksInCycle;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–æ–π –¥–µ–Ω –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –µ
    const dayOfWeek = date.getDay();
    
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–µ–Ω—è—Ç –µ –≤ —Ç–µ–∫—É—â–∏—è —Ü–∏–∫—ä–ª
    let weekCount = 0;
    for (const pattern of WORK_SCHEDULE.pattern) {
        if (cyclePosition >= weekCount && cyclePosition < weekCount + pattern.weeks) {
            return pattern.days.includes(dayOfWeek);
        }
        weekCount += pattern.weeks;
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –¥–µ–Ω
function getDayStatus(date) {
    if (!isWorkDay(date)) {
        return 'weekend';
    }
    return isOfficeDay(date) ? 'office' : 'remote';
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusDescription(status) {
    switch(status) {
        case 'office': return '–í –æ—Ñ–∏—Å–∞';
        case 'remote': return '–û—Ç –≤–∫—ä—â–∏';
        case 'weekend': return '–ü–æ—á–∏–≤–∫–∞';
        default: return '';
    }
}

// Fallback –¥–∞–Ω–Ω–∏ –∑–∞ –æ—Ñ–∏—Å –º–µ—Å—Ç–∞ (–∞–∫–æ CSV –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –∑–∞—Ä–µ–¥–∏)
const FALLBACK_SEATS_DATA = `348,–°–æ—Ñ–∏—è –ì—Ä–∏–≥–æ—Ä–æ–≤–∞
347,–î–∞—Ä–∏–Ω–∞ –ê—Ç–∞–Ω–∞—Å–æ–≤–∞
346,–ï–º–∏–ª–∏—è –ß–∞–∫—ä—Ä–æ–≤–∞
345,–ê–ª–µ–∫—Å–∞–Ω–¥—ä—Ä –¢–æ–¥–æ—Ä–æ–≤
352,–•—Ä–∏—Å—Ç–∏–Ω–∞ –ù–∏–Ω–æ–≤–∞
351,–ú–∏—Ä–æ—Å–ª–∞–≤–∞ –ê–ª–µ–∫—Å–æ–≤–∞
350,–°–≤–æ–±–æ–¥–Ω–æ
349,–†—É–º–µ–Ω –ê–ª–µ–∫—Å–æ–≤
356,–ì—é–ª–¥–∂–∞–Ω –ò–±—Ä—è–º
355,–†—É–º–µ–Ω –ò–≤–∞–Ω–æ–≤
354,–ü–ª–∞–º–µ–Ω –ü–µ–Ω–∫–æ–≤
353,–ë–æ—Ä–∏—Å –ò–≤–∞–Ω–æ–≤
360,–°—Ç–∞–Ω–∏—Å–ª–∞–≤–∞ –†—É–π–∫–æ–≤–∞
359,–í–∏–∫—Ç–æ—Ä–∏—è –ô–æ—Ä–¥–∞–Ω–æ–≤–∞
358,–•—Ä–∏—Å—Ç–∏–Ω–∞ –•–∞–π–¥–∞—Ä–ª–∏–µ–≤–∞
357,–¢–∞—Ç—è–Ω–∞ –î–µ–º–∏—Ä–µ–≤–∞
364,–°–≤–æ–±–æ–¥–Ω–æ
363,–°–≤–æ–±–æ–¥–Ω–æ
362,–°–≤–æ–±–æ–¥–Ω–æ
361,–°–≤–æ–±–æ–¥–Ω–æ
368,–ë–æ—è–Ω –ì–µ—á–µ–≤
367,–õ—ä—á–µ–∑–∞—Ä –•—É–º–±–∞–¥–∂–∏–µ–≤
366,–í–∏–æ–ª–µ—Ç–∞ –ú–∞—Å–ª–∞—Ä—Å–∫–∞
365,–†–∞–¥–æ—Å–ª–∞–≤ –ù–∏–∫–æ–ª–æ–≤`;

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –æ—Ñ–∏—Å –º–µ—Å—Ç–∞—Ç–∞ –æ—Ç CSV
async function loadOfficeSeatsData() {
    try {
        console.log('üîÑ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –æ—Ñ–∏—Å –º–µ—Å—Ç–∞...');
        const response = await fetch('officeSeats.csv');
        
        if (!response.ok) {
            throw new Error('CSV —Ñ–∞–π–ª—ä—Ç –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –∑–∞—Ä–µ–¥–∏');
        }
        
        console.log('üì° –û—Ç–≥–æ–≤–æ—Ä –ø–æ–ª—É—á–µ–Ω:', response.status, response.ok);
        const text = await response.text();
        console.log('üìÑ CSV —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ (–ø—ä—Ä–≤–∏ 100 —Å–∏–º–≤–æ–ª–∞):', text.substring(0, 100));
        const lines = text.split('\n');
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ
        officeSeatsData = lines.slice(1)
            .filter(line => line.trim())
            .map(line => {
                const [number, name] = line.split(',');
                return {
                    number: number?.trim(),
                    name: name?.trim() || ''
                };
            })
            .filter(seat => seat.number);
            
        // –ù–ï —Å–æ—Ä—Ç–∏—Ä–∞–º–µ - –∑–∞–ø–∞–∑–≤–∞–º–µ —Ä–µ–¥–∞ –æ—Ç —Ñ–∞–π–ª–∞!
        console.log('‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏', officeSeatsData.length, '–º–µ—Å—Ç–∞ –æ—Ç CSV');
        console.log('üìã –ü—Ä–∏–º–µ—Ä–Ω–∏ –º–µ—Å—Ç–∞:', officeSeatsData.slice(0, 3));
    } catch (error) {
        console.warn('‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ CSV, –∏–∑–ø–æ–ª–∑–≤–∞–º fallback –¥–∞–Ω–Ω–∏:', error.message);
        
        // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ fallback –¥–∞–Ω–Ω–∏—Ç–µ
        const lines = FALLBACK_SEATS_DATA.split('\n');
        officeSeatsData = lines
            .filter(line => line.trim())
            .map(line => {
                const [number, name] = line.split(',');
                return {
                    number: number?.trim(),
                    name: name?.trim() || ''
                };
            })
            .filter(seat => seat.number);
            
        // –ù–ï —Å–æ—Ä—Ç–∏—Ä–∞–º–µ - –∑–∞–ø–∞–∑–≤–∞–º–µ —Ä–µ–¥–∞ –æ—Ç –¥–∞–Ω–Ω–∏—Ç–µ!
        console.log('‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏', officeSeatsData.length, '–º–µ—Å—Ç–∞ –æ—Ç fallback –¥–∞–Ω–Ω–∏');
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ—Ñ–∏—Å –º–µ—Å—Ç–∞—Ç–∞
function showOfficeSeats() {
    console.log('ü™ë –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ—Ñ–∏—Å –º–µ—Å—Ç–∞...');
    const grid = document.getElementById('officeSeatsGrid');
    
    if (!grid) {
        console.error('‚ùå Grid –µ–ª–µ–º–µ–Ω—Ç –ù–ï –µ –Ω–∞–º–µ—Ä–µ–Ω!');
        return;
    }
    
    console.log('‚úÖ Grid –µ–ª–µ–º–µ–Ω—Ç –Ω–∞–º–µ—Ä–µ–Ω');
    console.log('üìä –ë—Ä–æ–π –º–µ—Å—Ç–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ:', officeSeatsData.length);
    
    grid.innerHTML = '';
    
    officeSeatsData.forEach((seat, index) => {
        const seatElement = document.createElement('div');
        seatElement.className = 'office-seat';
        seatElement.setAttribute('data-seat', seat.number);
        
        const numberElement = document.createElement('div');
        numberElement.className = 'seat-number';
        numberElement.textContent = seat.number;
        
        const nameElement = document.createElement('div');
        if (seat.name) {
            nameElement.className = 'seat-name';
            nameElement.textContent = seat.name;
        } else {
            nameElement.className = 'seat-empty';
            nameElement.textContent = '–°–≤–æ–±–æ–¥–Ω–æ';
        }
        
        seatElement.appendChild(numberElement);
        seatElement.appendChild(nameElement);
        grid.appendChild(seatElement);
        
        if (index === 0) {
            console.log('‚úÖ –ü—ä—Ä–≤–æ –º—è—Å—Ç–æ —Å—ä–∑–¥–∞–¥–µ–Ω–æ:', seat.number);
        }
    });
    
    console.log('‚úÖ –í—Å–∏—á–∫–∏ –º–µ—Å—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–∏');
}


// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω –≤ –º–µ—Å–µ—Ü–∞
function isLastWorkingDayOfMonth(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    
    // –ù–∞–º–∏—Ä–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—è –¥–µ–Ω –æ—Ç –º–µ—Å–µ—Ü–∞
    const lastDayOfMonth = new Date(year, month + 1, 0);
    
    // –¢—ä—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏—è —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ø–µ—Ç—ä–∫)
    let lastWorkingDay = new Date(lastDayOfMonth);
    
    while (lastWorkingDay.getDay() === 0 || lastWorkingDay.getDay() === 6) {
        lastWorkingDay.setDate(lastWorkingDay.getDate() - 1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ –ø–æ—Å–ª–µ–¥–Ω–∏—è—Ç —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω
    return date.getDate() === lastWorkingDay.getDate() && 
           date.getMonth() === lastWorkingDay.getMonth() &&
           date.getFullYear() === lastWorkingDay.getFullYear();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –æ—Ñ–∏—Å –¥–µ–Ω
function getNextOfficeDay(fromDate) {
    const searchDate = new Date(fromDate);
    searchDate.setDate(searchDate.getDate() + 1); // –ó–∞–ø–æ—á–≤–∞–º–µ –æ—Ç —É—Ç—Ä–µ
    
    // –¢—ä—Ä—Å–∏–º –º–∞–∫—Å–∏–º—É–º 30 –¥–Ω–∏ –Ω–∞–ø—Ä–µ–¥
    for (let i = 0; i < 30; i++) {
        if (isOfficeDay(searchDate)) {
            return new Date(searchDate);
        }
        searchDate.setDate(searchDate.getDate() + 1);
    }
    
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å
function showCurrentStatus() {
    const today = new Date();
    const status = getDayStatus(today);
    const nextOfficeDay = getNextOfficeDay(today);
    
    // –û–±–Ω–æ–≤—è–≤–∞–º–µ dashboard
    const currentDateElement = document.getElementById('currentDate');
    const todayStatusElement = document.getElementById('todayStatus');
    
    if (currentDateElement) {
        currentDateElement.textContent = formatDate(today);
    }
    
    if (todayStatusElement) {
        let statusText = '';
        let statusClass = 'status-preview';
        
        if (status === 'office') {
            statusText = 'üè¢ –î–Ω–µ—Å —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–º –≤ –æ—Ñ–∏—Å–∞';
            statusClass += ' office';
        } else if (status === 'weekend') {
            statusText = 'üèñÔ∏è –ü–æ—á–∏–≤–∫–∞';
            statusClass += ' weekend';
        } else {
            if (nextOfficeDay) {
                const nextDay = DAY_NAMES[nextOfficeDay.getDay()];
                const nextDate = `${nextOfficeDay.getDate()}.${(nextOfficeDay.getMonth() + 1).toString().padStart(2, '0')}`;
                statusText = `–°–ª–µ–¥–≤–∞—â –æ—Ñ–∏—Å –¥–µ–Ω: ${nextDay}, ${nextDate}`;
                statusClass += ' remote';
            } else {
                statusText = 'üè† –†–∞–±–æ—Ç—è –æ—Ç –≤–∫—ä—â–∏';
                statusClass += ' remote';
            }
        }
        
        todayStatusElement.textContent = statusText;
        todayStatusElement.className = statusClass;
    }
    
    // –û–±–Ω–æ–≤—è–≤–∞–º–µ –º–æ–¥–∞–ª–∞
    const modalCurrentDate = document.getElementById('modalCurrentDate');
    const modalTodayStatus = document.getElementById('modalTodayStatus');
    
    if (modalCurrentDate) {
        modalCurrentDate.textContent = formatDate(today);
    }
    
    if (modalTodayStatus) {
        let statusText = '';
        let statusClass = 'status';
        
        if (status === 'office') {
            statusText = 'üè¢ –î–Ω–µ—Å —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–º –≤ –æ—Ñ–∏—Å–∞';
            statusClass += ' office';
        } else {
            if (nextOfficeDay) {
                const nextDay = DAY_NAMES[nextOfficeDay.getDay()];
                const nextDate = `${nextOfficeDay.getDate()}.${(nextOfficeDay.getMonth() + 1).toString().padStart(2, '0')}`;
                modalTodayStatus.innerHTML = `üè¢ –°–ª–µ–¥–≤–∞—â –æ—Ñ–∏—Å –¥–µ–Ω: <strong>${nextDay}, ${nextDate}</strong>`;
                modalTodayStatus.className = 'status remote';
                return;
            } else {
                statusText = 'üè† –†–∞–±–æ—Ç—è –æ—Ç –≤–∫—ä—â–∏';
                statusClass += ' remote';
            }
        }
        
        modalTodayStatus.textContent = statusText;
        modalTodayStatus.className = statusClass;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ mini calendar –≤ dashboard
function showMiniCalendar() {
    const miniCalendar = document.getElementById('miniCalendar');
    if (!miniCalendar) return;
    
    const today = new Date();
    const month = today.getMonth();
    const year = today.getFullYear();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∞–º–æ —Å–ª–µ–¥–≤–∞—â–∏—Ç–µ 2 —Å–µ–¥–º–∏—Ü–∏
    miniCalendar.innerHTML = '';
    
    for (let i = 0; i < 14; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-day';
        
        const status = getDayStatus(date);
        dayElement.classList.add(status);
        
        if (i === 0) {
            dayElement.classList.add('today');
        }
        
        dayElement.textContent = date.getDate();
        dayElement.title = `${date.getDate()} ${MONTH_NAMES[date.getMonth()]} - ${getStatusDescription(status)}`;
        
        miniCalendar.appendChild(dayElement);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä –∑–∞ –º–µ—Å–µ—Ü
function generateCalendar(month, year) {
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    
    // –ù–∞–º–∏—Ä–∞–º–µ –ø—ä—Ä–≤–∏—è –¥–µ–Ω –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫)
    const dayOfWeek = firstDay.getDay();
    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
    startDate.setDate(firstDay.getDate() - daysToMonday);
    
    const calendar = [];
    const today = new Date();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ 6 —Å–µ–¥–º–∏—Ü–∏ (42 –¥–Ω–∏) –∑–∞ –¥–∞ –ø–æ–∫—Ä–∏–µ–º —Ü–µ–ª–∏—è –º–µ—Å–µ—Ü
    for (let week = 0; week < 6; week++) {
        const weekDays = [];
        for (let day = 0; day < 7; day++) {
            const currentDate = new Date(startDate);
            currentDate.setDate(startDate.getDate() + (week * 7) + day);
            
            const isCurrentMonth = currentDate.getMonth() === month;
            const isToday = currentDate.toDateString() === today.toDateString();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–º–µ —Å—Ç–∞—Ç—É—Å–∞
            const status = getDayStatus(currentDate);
            
            weekDays.push({
                date: new Date(currentDate),
                dayNumber: currentDate.getDate(),
                isCurrentMonth: isCurrentMonth,
                isToday: isToday,
                status: status
            });
        }
        calendar.push(weekDays);
    }
    
    return calendar;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
function showCalendar() {
    const calendarDays = document.getElementById('calendarDays');
    const currentMonthYear = document.getElementById('currentMonthYear');
    
    // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü –∏ –≥–æ–¥–∏–Ω–∞
    currentMonthYear.textContent = `${MONTH_NAMES[currentMonth]} ${currentYear}`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    const calendar = generateCalendar(currentMonth, currentYear);
    
    calendarDays.innerHTML = '';
    
    calendar.forEach((week, weekIndex) => {
        week.forEach((day, dayIndex) => {
            const dayElement = document.createElement('div');
            dayElement.className = `calendar-day ${day.status}`;
            dayElement.setAttribute('role', 'gridcell');
            dayElement.setAttribute('aria-label', `${day.dayNumber} ${MONTH_NAMES[day.date.getMonth()]} ${day.date.getFullYear()}, ${getStatusDescription(day.status)}`);
            
            if (!day.isCurrentMonth) {
                dayElement.classList.add('other-month');
            }
            
            if (day.isToday) {
                dayElement.classList.add('today');
                dayElement.setAttribute('aria-current', 'date');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–µ–Ω —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω –æ—Ç –º–µ—Å–µ—Ü–∞
            const isPayday = day.isCurrentMonth && isLastWorkingDayOfMonth(day.date);
            if (isPayday) {
                dayElement.classList.add('payday');
            }
            
            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = day.dayNumber;
            
            const dayStatus = document.createElement('div');
            dayStatus.className = 'day-status';
            
            // –ê–∫–æ –µ –¥–µ–Ω –Ω–∞ –∑–∞–ø–ª–∞—Ç–∞, –ø–æ–∫–∞–∑–≤–∞–º–µ —Å–∞–º–æ –∑–∞–ø–ª–∞—Ç–∞
            if (isPayday) {
                // –ù–∞ –º–æ–±–∏–ª–Ω–∏ - –±–µ–∑ –µ–º–æ–¥–∂–∏, –Ω–∞ desktop - —Å –µ–º–æ–¥–∂–∏
                if (isMobile()) {
                    dayStatus.textContent = '–ó–∞–ø–ª–∞—Ç–∞';
                } else {
                    dayStatus.textContent = 'üí∞ –ó–∞–ø–ª–∞—Ç–∞ üí∞';
                }
            } else {
                dayStatus.textContent = getStatusDescription(day.status);
            }
            
            dayElement.appendChild(dayNumber);
            dayElement.appendChild(dayStatus);
            
            // –î–æ–±–∞–≤—è–º–µ touch events –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if (isMobile()) {
                dayElement.addEventListener('touchstart', () => {
                    dayElement.style.transform = 'scale(0.95)';
                });
                
                dayElement.addEventListener('touchend', () => {
                    dayElement.style.transform = '';
                });
            }
            
            calendarDays.appendChild(dayElement);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫—ä–º –ø—Ä–µ–¥–∏—à–µ–Ω –º–µ—Å–µ—Ü
function goToPreviousMonth() {
    currentMonth--;
    if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
    }
    showCalendar();
    
    // –î–æ–±–∞–≤—è–º–µ haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (navigator.vibrate) {
        navigator.vibrate(50);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫—ä–º —Å–ª–µ–¥–≤–∞—â –º–µ—Å–µ—Ü
function goToNextMonth() {
    currentMonth++;
    if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
    }
    showCalendar();
    
    // –î–æ–±–∞–≤—è–º–µ haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (navigator.vibrate) {
        navigator.vibrate(50);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫—ä–º —Ç–µ–∫—É—â–∏—è –¥–µ–Ω
function goToToday() {
    const today = new Date();
    currentMonth = today.getMonth();
    currentYear = today.getFullYear();
    showCalendar();
    
    // –î–æ–±–∞–≤—è–º–µ haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (navigator.vibrate) {
        navigator.vibrate(50);
    }
    
    // –î–æ–±–∞–≤—è–º–µ –≤–∏–∑—É–∞–ª–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞
    const todayBtn = document.getElementById('goToToday');
    todayBtn.style.transform = 'scale(0.95)';
    setTimeout(() => {
        todayBtn.style.transform = '';
    }, 150);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∏ —Å—ä–∫—Ä–∞—â–µ–Ω–∏—è
function handleKeyboardNavigation(event) {
    switch(event.key) {
        case 'ArrowLeft':
            event.preventDefault();
            goToPreviousMonth();
            break;
        case 'ArrowRight':
            event.preventDefault();
            goToNextMonth();
            break;
        case 'Home':
            event.preventDefault();
            goToToday();
            break;
        case 't':
        case 'T':
            event.preventDefault();
            goToToday();
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ swipe gestures –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
let touchStartX = 0;
let touchEndX = 0;
let touchStartY = 0;
let touchEndY = 0;

function handleTouchStart(event) {
    touchStartX = event.changedTouches[0].screenX;
    touchStartY = event.changedTouches[0].screenY;
}

function handleTouchEnd(event) {
    touchEndX = event.changedTouches[0].screenX;
    touchEndY = event.changedTouches[0].screenY;
    handleSwipe();
}

function handleSwipe() {
    const swipeThreshold = 50;
    const diffX = touchStartX - touchEndX;
    const diffY = touchStartY - touchEndY;
    
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ swipe-—ä—Ç –µ –ø—Ä–µ–¥–∏–º–Ω–æ —Ö–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–µ–Ω
    if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > swipeThreshold) {
        if (diffX > 0) {
            // Swipe left - next month
            goToNextMonth();
        } else {
            // Swipe right - previous month
            goToPreviousMonth();
        }
    }
}

// Modal swipe gestures
let modalTouchStartY = 0;
let modalTouchEndY = 0;

function handleModalSwipe(event, closeFunction) {
    if (event.type === 'touchstart') {
        modalTouchStartY = event.touches[0].clientY;
    } else if (event.type === 'touchend') {
        modalTouchEndY = event.changedTouches[0].clientY;
        const diffY = modalTouchEndY - modalTouchStartY;
        
        // Swipe down –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ (–ø–æ–Ω–µ 100px)
        if (diffY > 100) {
            closeFunction();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–±–∏–ª–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
function enhanceMobileNavigation() {
    if (isMobile()) {
        // –î–æ–±–∞–≤—è–º–µ –ø–æ-–≥–æ–ª–µ–º–∏ touch areas –∑–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => {
            btn.addEventListener('touchstart', function() {
                this.style.transform = 'scale(0.9)';
            });
            
            btn.addEventListener('touchend', function() {
                this.style.transform = '';
            });
        });
        
        // –î–æ–±–∞–≤—è–º–µ long press –∑–∞ –±—ä—Ä–∑–æ –ø—Ä–µ–º–∏–Ω–∞–≤–∞–Ω–µ –∫—ä–º –¥–Ω–µ—Å
        let longPressTimer;
        const todayBtn = document.getElementById('goToToday');
        
        todayBtn.addEventListener('touchstart', function() {
            longPressTimer = setTimeout(() => {
                goToToday();
                if (navigator.vibrate) {
                    navigator.vibrate([100, 50, 100]);
                }
            }, 800);
        });
        
        todayBtn.addEventListener('touchend', function() {
            clearTimeout(longPressTimer);
        });
        
        todayBtn.addEventListener('touchmove', function() {
            clearTimeout(longPressTimer);
        });
    }
}

let lastRenderedDate = new Date();

function updateDateTime() {
    const now = new Date();
    showCurrentStatus();
    showMiniCalendar();

    // –û–±–Ω–æ–≤—è–≤–∞–π –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–∞–º–æ –∞–∫–æ –µ –Ω–æ–≤ –¥–µ–Ω
    if (
        now.getDate() !== lastRenderedDate.getDate() ||
        now.getMonth() !== lastRenderedDate.getMonth() ||
        now.getFullYear() !== lastRenderedDate.getFullYear()
    ) {
        currentMonth = now.getMonth();
        currentYear = now.getFullYear();
        showCalendar();
        lastRenderedDate = now;
    }
}

function scheduleDayUpdate() {
    const now = new Date();
    // –ò–∑—á–∏—Å–ª–∏ –∫–æ–ª–∫–æ ms –¥–æ —Å–ª–µ–¥–≤–∞—â–∏—è –¥–µ–Ω (00:00:00)
    const nextDay = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0, 0);
    const msToNextDay = nextDay - now;

    setTimeout(() => {
        updateDateTime(); // —â–µ –æ–±–Ω–æ–≤–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
        scheduleDayUpdate(); // –Ω–∞—Å—Ä–æ—á–∏ —Å–ª–µ–¥–≤–∞—â–æ—Ç–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ
    }, msToNextDay);
}

function startAutoUpdate() {
    updateDateTime();
    setInterval(showCurrentStatus, 60000);
    scheduleDayUpdate();

    document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
            updateDateTime();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ calendar modal
function openCalendarModal() {
    const modal = document.getElementById('calendarModal');
    if (modal) {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        showCalendar();
        showCurrentStatus();
        
        // Haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏
        if (navigator.vibrate) {
            navigator.vibrate(50);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ calendar modal
function closeCalendarModal() {
    const modal = document.getElementById('calendarModal');
    if (modal) {
        modal.classList.remove('active');
        document.body.style.overflow = '';
        
        // Haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏
        if (navigator.vibrate) {
            navigator.vibrate(30);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ seats modal
function openSeatsModal() {
    const modal = document.getElementById('seatsModal');
    if (modal) {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        showOfficeSeats();
        
        // Haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏
        if (navigator.vibrate) {
            navigator.vibrate(50);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ seats modal
function closeSeatsModal() {
    const modal = document.getElementById('seatsModal');
    if (modal) {
        modal.classList.remove('active');
        document.body.style.overflow = '';
        
        // Haptic feedback –∑–∞ –º–æ–±–∏–ª–Ω–∏
        if (navigator.vibrate) {
            navigator.vibrate(30);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ seats count –≤ dashboard
function updateSeatsCount() {
    const seatsCountElement = document.getElementById('seatsCount');
    if (seatsCountElement) {
        seatsCountElement.textContent = officeSeatsData.length;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
async function initApp() {
    console.log('üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ...');
    
    // –ó–∞—Ä–µ–∂–¥–∞–º–µ –æ—Ñ–∏—Å –º–µ—Å—Ç–∞—Ç–∞
    await loadOfficeSeatsData();
    
    // –ü–æ–∫–∞–∑–≤–∞–º–µ dashboard —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
    showCurrentStatus();
    showMiniCalendar();
    updateSeatsCount();
    
    // –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Ç–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ
    startAutoUpdate();
    
    // Dashboard Cards - Event Listeners
    const calendarCard = document.getElementById('calendarCard');
    const seatsCard = document.getElementById('seatsCard');
    
    if (calendarCard) {
        calendarCard.addEventListener('click', openCalendarModal);
        console.log('‚úÖ Calendar card listener –¥–æ–±–∞–≤–µ–Ω');
    }
    
    if (seatsCard) {
        seatsCard.addEventListener('click', openSeatsModal);
        console.log('‚úÖ Seats card listener –¥–æ–±–∞–≤–µ–Ω');
    }
    
    // Modal Close Buttons
    const closeCalendarBtn = document.getElementById('closeCalendarModal');
    const closeSeatsBtn = document.getElementById('closeSeatsModal');
    
    if (closeCalendarBtn) {
        closeCalendarBtn.addEventListener('click', closeCalendarModal);
    }
    
    if (closeSeatsBtn) {
        closeSeatsBtn.addEventListener('click', closeSeatsModal);
    }
    
    // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª –ø—Ä–∏ –∫–ª–∏–∫ –∏–∑–≤—ä–Ω —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ
    const calendarModal = document.getElementById('calendarModal');
    const seatsModal = document.getElementById('seatsModal');
    
    if (calendarModal) {
        calendarModal.addEventListener('click', (e) => {
            if (e.target === calendarModal) {
                closeCalendarModal();
            }
        });
        
        // Swipe down gesture –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–±–∏–ª–Ω–∏
        if (isMobile()) {
            const calendarModalContent = calendarModal.querySelector('.modal-content');
            if (calendarModalContent) {
                calendarModalContent.addEventListener('touchstart', (e) => handleModalSwipe(e, closeCalendarModal));
                calendarModalContent.addEventListener('touchend', (e) => handleModalSwipe(e, closeCalendarModal));
            }
        }
    }
    
    if (seatsModal) {
        seatsModal.addEventListener('click', (e) => {
            if (e.target === seatsModal) {
                closeSeatsModal();
            }
        });
        
        // Swipe down gesture –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–±–∏–ª–Ω–∏
        if (isMobile()) {
            const seatsModalContent = seatsModal.querySelector('.modal-content');
            if (seatsModalContent) {
                seatsModalContent.addEventListener('touchstart', (e) => handleModalSwipe(e, closeSeatsModal));
                seatsModalContent.addEventListener('touchend', (e) => handleModalSwipe(e, closeSeatsModal));
            }
        }
    }
    
    // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª —Å ESC –∫–ª–∞–≤–∏—à
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeCalendarModal();
            closeSeatsModal();
        }
    });
    
    // –î–æ–±–∞–≤—è–º–µ event listeners –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    const prevMonthBtn = document.getElementById('prevMonth');
    const nextMonthBtn = document.getElementById('nextMonth');
    const goTodayBtn = document.getElementById('goToToday');
    
    if (prevMonthBtn) {
        prevMonthBtn.addEventListener('click', goToPreviousMonth);
    }
    
    if (nextMonthBtn) {
        nextMonthBtn.addEventListener('click', goToNextMonth);
    }
    
    if (goTodayBtn) {
        goTodayBtn.addEventListener('click', goToToday);
    }
    
    // –î–æ–±–∞–≤—è–º–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    document.addEventListener('keydown', handleKeyboardNavigation);
    
    // –î–æ–±–∞–≤—è–º–µ –ø–æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–±–∏–ª–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    enhanceMobileNavigation();
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –≥–æ—Ç–æ–≤–æ!');
}

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∫–æ–≥–∞—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å–µ –∑–∞—Ä–µ–¥–∏
document.addEventListener('DOMContentLoaded', initApp); 